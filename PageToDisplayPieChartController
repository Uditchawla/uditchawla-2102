global with sharing class PageToDisplayPieChartController 
{
    public list<SelectOption> options;
    public List<RecordType> selectedRecordType;
    global string selectedValue{get;set;}
    public List<String> primaryList{get;set;}
    public Map<String, Integer> dataMap{get;set;} 
    public String dataMapJSON{get;set;}
    
    public List<AggregateResult> allAccounts{get;set;}
    
    public PageToDisplayPieChartController()
    {
        dataMap = new Map<String, Integer>();
        allAccounts = [Select BillingCountry Country, Count(Id) NumberOfAccounts
                                                 From Account Where BillingCountry != null 
                                                 Group By BillingCountry];
        
        For(AggregateResult thisAggregateResult:allAccounts)
        {
            dataMap.put((String)thisAggregateResult.get('Country'), (Integer) thisAggregateResult.get('NumberOfAccounts'));
        }
        System.debug('dataMap in constructor'+dataMap);
    }
    
    public list<SelectOption> getRecordTypes()
    {
        options = new list<SelectOption>();
        options.add(new selectOption('', '-- All Accounts --'));
        
        selectedRecordType = [SELECT Id, Name FROM RecordType WHERE sObjectType = 'Account'];
        for(RecordType sRecordType : selectedRecordType)
        {
            options.add(new SelectOption(sRecordType.Id, sRecordType.Name));
        }
        System.debug('Options@@'+options);
        return options;
        
    }
    
    public void getAccts()
    {
        dataMap = new Map<String, Integer>();
        System.debug('selectedValueofRecordType'+selectedValue);
      allAccounts = [Select BillingCountry Country, Count(Id) NumberOfAccounts
                                                 From Account Where BillingCountry != null AND RecordType.ID=:selectedValue
                                                 Group By BillingCountry];
        System.debug('allAccounts@@'+allAccounts);
        For(AggregateResult thisAggregateResult:allAccounts)
        {
            dataMap.put((String)thisAggregateResult.get('Country'), (Integer) thisAggregateResult.get('NumberOfAccounts'));
        }
        System.debug('dataMap@@'+dataMap);
        dataMapJSON = JSON.serialize(dataMap);
        System.debug('dataMapJSON'+dataMapJSON);
           
    }
}
